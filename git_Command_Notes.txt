
mkdir <FOLDERNAME>										Make a new folder (aka make directory)

cd <FOLDERNAME>											Navigate into an existing folder (aka change directory)

ls														List the items in a folder

git init												Turn Git on for a folder


===================================


git config --list											check existing git config list

git config --global user.name "Your Name"

git config --global user.email "Your Email address"

git config --global user.username "Git Hub Username"

=================================

git clone <<URL>>

git status

git log
git log --oneline
git log --online --decorate			(also show branches)
git log --stat
git log -p							(same as git log --patch)
git log -p -w 						(ignore white space changes)
git log --oneline --decorate --graph --all

git show							(search and show the last commit details)
git show <<sha number>> 			(git show fdf5493)


git add <<name OR folder/name>>
git .								(. period means everything under this current folder)


git commit
git commit -m "<<commit message>>"


git diff							(differences between unstage and latest commited version)


.gitignore 							(special type of file and put file name which you want to ingore into this .gitignore file)


git tag
git tag -a <<v1.0>>					(add tag to the recent commit)
git tag -a <<v1.0>> <<SHA number>>	(add tag to specific SHA number commit)
git tag -d <<v1.0>>					(delete tag) (same as git tag --delete <<v1.0>>)


git branch							(show all branches)
git branch <<name>>					(create new branch)
git branch <<name>> <<SHA number>>	(create new branch pointing to that specific SHA commit, git branch alt-sidebar-loc 42a69f)

git branch -d <<name>>				(delete Local branch)
git push <<REMOTE NAME>> --delete <<BRANCH NAME>>		(Delete Remote Branch)
git branch _D <<name>>				(force deletion)


git checkout <<name>>				(switch to that branch or master)
git checkout -b <<name>>			(create new branch and switch to that new branch)
git checkout -b <<name>> origin/<<branchname>>			(checkout from that branch of origin and create as new branch in local)



git merge <name-of- other branch-to-merge-in>

There are two types of merges:
	Fast-forward merge – the branch being merged in must be ahead of the checked out branch. The checked out branch's pointer will just be moved forward to point to the same commit as the other branch.

	the regular type of merge
		two divergent branches are combined
		a merge commit is created


		
git commit --amend					(amend the last commit message OR any changes to want to add on to the last commit instead of creating new commit)


git revert <SHA number>>			(will undo the changes that were made by the provided commit and change to commit of SHA number version 
									and create as new commit)


git reset							(erase commits from current branch)
git reset <<SHA number>>			(default as --mixed flag)
git reset --hard HEAD^				(--mixed => erased file into Working Directory, --soft => erased file into staging index, --hard => erased file into trash)

git reset --hard HEAD~1				(erased last commit and move HEAD back to 1 commit before)
git reset --soft HEAD~1				(erased file into staging index)
git reset HEAD^						(same as reset soft, remove commit locally)

In the scenairos of you reset hard the local and try to push to remote. You will face issue because Local Head is pointing one head later than remote one.
If you are sure that you want to delete those commits from remote, use force push.

git push origin HEAD+				(force push the new HEAD commit)


OR, if you want to keep the commit in local. but want to delete from remote.
git push origin +HEAD^:<<name of your branch, most likely 'master'>>

=======================================================

******** Git Remote ********

git remote -v													(see the details addresses about a connection to a remote)


git remote add 	<<RemoteShortName>>	<<URL>>						(add a connection to a new remote repository with that short name)
git remote rename <<CurrentShortName>>	<NewShortName>>			(Change Remote Name)


git remote set-url <<RemoteShortName>>  <<NEW URL>>				(Change Remote URL)


git push <<RemoteShortName>> <BranchName>>						Example: git push origin master
git push -f <<RemoteShortName>>	<BranchName>>					Force push, if remote repo has the commits that local push doesn't have(example: after squashing)

git push <<REMOTE NAME>> --delete <<BRANCH NAME>>				(Delete Remote Branch)


git pull <<RemoteShortName>> <BranchName>>						pull everything from remote and AUTOMATICALLY MERGE with local current branch
																Also update Local Copy of Origin/Master 
																
git fetch --dry-run												See changes to the remote before you pullin
														
git fetch <<RemoteShortName>> <BranchName>>						Only Update Local Copy of Origin/Master
																Have to MANUALLY Merge based on requirements. Useful when working directory code are different
																from Remote Origin/Master and want to do Manually merge.

git pull origin master = git fetch original master + git merge origin/master

==========================================================

*** Working with team (git log)*** 

git shortlog -s -n 										(-s: show just the number of commits, -n: sort them numerically

git log --author=<<name>>
git log --author="Paul Lewis"							(need "" double quote if search by space included name)

git log --grep=bug										(log all commits which include word "bug")
git log --grep bug										(same as above)
git log --grep="bug fixes"


*** Rebase Commands ***

git rebase -i <<base>>									git rebase -i HEAD~3 (interactively rebase the commits to the one that's 3 before the one we're on)

use p or pick – to keep the commit as is
use r or reword – to keep the commit's content but alter the commit message
use e or edit – to keep the commit's content but stop before committing so that you can:
	add new content or files
	remove content or files
	alter the content that was going to be committed
use s or squash – to combine this commit's changes into the previous commit (the commit above it in the list)
use f or fixup – to combine this commit's change into the previous one but drop the commit message
use x or exec – to run a shell command
use d or drop – to delete the commit

==========================================================

***  Change Remote Repository in Git Hub ***

1) Change the repo in git hut to the name you want. Then get the new repo git address.

2) In Local, set the new repo git address.

git remote set-url origin <<someuser/newprojectname.git>>

3) Change the local folder name same as repo name, if you want.
